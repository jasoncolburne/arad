#!/usr/bin/env bash

set -eo pipefail

NODES=(administrator reviewer reader identity)

stack_up() {
  docker compose up
}

stack_down() {
  docker compose down
}

stack_build() {
  docker compose build
  echo "builing node_modules"
  docker compose run --rm -v"$(pwd)/front-end:/app" front-end bash -c "yarn install && chown -R $(id -u):$(id -g) node_modules"
}

poetry_relock() {
  for NODE in "${NODES[@]}"; do
    docker compose run --rm node-$NODE bash -c "rm -f poetry.lock && poetry lock -vv"
  done
}

nodes_exec() {
  local ARGUMENTS=$1

  for NODE in "${NODES[@]}"; do
    docker compose run --rm node-$NODE bash -c "${ARGUMENTS}"
  done
}

docker_image_prune() {
  # prune dangling images
  docker image prune -f
}

docker_compose_rm() {
  # remove one off containers
  docker compose rm
}

# we can probably do the rest in a single line by eval or something
execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "up" ]]; then
    stack_up
  elif [[ "${COMMAND}" == "down" ]]; then
    stack_down
  elif [[ "${COMMAND}" == "build" ]]; then
    stack_build
  elif [[ "${COMMAND}" == "relock" ]]; then
    poetry_relock
  elif [[ "${COMMAND}" == "nodes-exec" ]]; then
    nodes_exec "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "prune" ]]; then
    docker_image_prune
  elif [[ "${COMMAND}" == "rm" ]]; then
    docker_compose_rm
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
