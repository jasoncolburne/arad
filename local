#!/usr/bin/env bash

set -eo pipefail

BACKENDS=(administrator reviewer reader identity)

stack_up() {
  docker compose up
}

stack_down() {
  docker compose down
}

stack_build() {
  docker compose down
  docker compose build

  echo
  echo "copying node_modules to host (this takes a bit)..."

  # this is required since we mount the volume in the same directory, meaning that the node_modules
  # directory on the container would be erased when it launched if we didn't do this
  rm -rf front-end/node_modules
  CONTAINER_ID=$(docker run --rm -d arad_front-end sleep 600)
  docker cp $CONTAINER_ID:/app/node_modules front-end
  docker kill $CONTAINER_ID
}

poetry_relock() {
  for BACKEND in "${BACKENDS[@]}"; do
    docker compose run --rm be-$BACKEND bash -c "rm -f poetry.lock && poetry lock -vv"
  done
}

be_exec() {
  local ARGUMENTS=$1

  for BACKEND in "${BACKENDS[@]}"; do
    docker compose run --rm be-$BACKEND bash -c "${ARGUMENTS}"
  done
}

types() {
  docker compose run --rm front-end ./build_types
}

docker_image_prune() {
  # prune dangling images
  docker image prune -f
}

docker_compose_rm() {
  # remove one off containers
  docker compose rm
}

# fapi_shell() {
#   local SERVICE=$1

#   echo hello
#   read -r -d '' SHELL_SCRIPT << EOS
# BASE_PATH=\$(poetry env info | grep '^Path' | head -n1 | cut -d':' -f2 | sed 's/\s*//')
# ACTIVATE="\${BASE_PATH}/bin/activate"
# . \${ACTIVATE}
# python -i /app/common/main.py
# EOS

#   docker compose run --rm -it be-$SERVICE bash -c "${SHELL_SCRIPT}"
# }

# we can probably do the rest in a single line by eval or something
execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "up" ]]; then
    stack_up
  elif [[ "${COMMAND}" == "down" ]]; then
    stack_down
  elif [[ "${COMMAND}" == "build" ]]; then
    stack_build
  elif [[ "${COMMAND}" == "relock" ]]; then
    poetry_relock
  elif [[ "${COMMAND}" == "be-exec" ]]; then
    be_exec "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "prune" ]]; then
    docker_image_prune
  elif [[ "${COMMAND}" == "rm" ]]; then
    docker_compose_rm
  elif [[ "${COMMAND}" == "types" ]]; then
    types
  # elif [[ "${COMMAND}" == "fapi-shell" ]]; then
  #   fapi_shell "${ARGUMENTS}"
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
