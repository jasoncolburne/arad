{"version":3,"file":"static/js/372.6926303f.chunk.js","mappings":"sPAyIA,UAzHiB,WACf,OAA4BA,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,EAA0BC,EAAAA,SAAe,IAAzC,eAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,EAAAA,SAAe,IAAnD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwCJ,EAAAA,SAAe,IAAvD,eAAOK,EAAP,KAAqBC,EAArB,KACA,EAAwCN,EAAAA,SAAe,IAAvD,eAAOO,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MAEjBV,EAAAA,WAAgB,YACVW,EAAAA,EAAAA,IAASb,EAAMc,cACjBH,EAAS,IAEZ,GAAE,CAACX,EAAMc,YAAaH,IAEvB,IAAMI,EAAe,SAACC,GACI,MAApBA,EAASC,OACXP,EAAgB,6BAEhBA,EAAgB,yBAAD,OAA0BM,EAASC,QAErD,EAEKC,EAAgB,yCAAG,WACvBC,GADuB,mFAGvBA,EAAMC,iBACFf,IAAeE,EAJI,gBAKrBG,EAAgB,0BALK,2BAMZ,CAACP,EAAOE,EAAYE,GAAcc,SAAS,IAN/B,gBAOrBX,EAAgB,mBAPK,8BASfY,EAA2B,CAAEnB,MAAAA,EAAOE,WAAAA,GATrB,WAUgCkB,EAAAA,EAAAA,KAAMC,KACzD,oBACA,KACAF,EACAP,GAdmB,aAiBJU,KAPXT,EAVe,UAkBbU,GAAWC,EAAAA,EAAAA,IAAoCX,GACrDf,EAASyB,IAnBU,4CAAH,sDAwBtB,OACE,SAAC,KAAD,CAAQE,EAAE,OAAV,UACE,SAAC,KAAD,CAAKC,EAAE,eAAP,UACE,6BACE,UAAC,KAAD,CAAaC,YAAU,EAAvB,mBAEE,SAAC,KAAD,CAAYC,KAAK,MAAjB,UACE,SAAC,KAAD,CACEC,GAAG,iBACHC,KAAK,QACLC,aAAa,KACbC,YAAY,MACZC,aAAa,MACbC,iBAAiB,QACjBC,SAAU,SAACnB,GACTf,EAASe,EAAMoB,OAAOC,MACvB,MAZP,YAgBE,SAAC,KAAD,CAAYT,KAAK,MAAjB,UACE,SAAC,KAAD,CACEC,GAAG,sBACHC,KAAK,WACLC,aAAa,KACbC,YAAY,MACZC,aAAa,MACbC,iBAAiB,QACjBC,SAAU,SAACnB,GACTb,EAAca,EAAMoB,OAAOC,MAC5B,MA1BP,gBA8BE,SAAC,KAAD,CAAYT,KAAK,MAAjB,UACE,SAAC,KAAD,CACEC,GAAG,wBACHC,KAAK,WACLC,aAAa,KACbC,YAAY,MACZC,aAAa,MACbC,iBAAiB,QACjBC,SAAU,SAACnB,GACTX,EAAgBW,EAAMoB,OAAOC,MAC9B,UAIP,SAAC,KAAD,CACER,GAAG,kBACHS,MAAM,OACNR,KAAK,SACLF,KAAK,MACLG,aAAa,KACbQ,MAAM,QACNC,gBAAgB,QAChBC,WAAW,SACXC,cAAc,MACdC,WAAW,MACXC,UAAU,OACVC,YAAY,iBACZC,QAAS/B,EAbX,uBAiBA,SAAC,KAAD,CAAQc,GAAG,wBAAX,SACoB,KAAjBvB,EAAsBA,EAAe,aAMjD,C","sources":["identification/Register/index.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { useNavigate } from \"react-router\";\n\nimport { Box, Center } from \"@chakra-ui/layout\";\nimport { FormControl, Button } from \"@chakra-ui/react\";\nimport { Input, InputGroup } from \"@chakra-ui/input\";\n\nimport { Api } from \"../../api/Api\";\nimport { RegisterRequest, RegisterResponse } from \"../../api/types/friendly\";\nimport {\n  stateFromAuthenticationResponseData,\n  useGlobalState,\n} from \"../../GlobalState\";\nimport { loggedIn } from \"../../utility/authorization\";\n\nconst Register = () => {\n  const { state, setState } = useGlobalState();\n  const [email, setEmail] = React.useState(\"\");\n  const [passphrase, setPassphrase] = React.useState(\"\");\n  const [verification, setVerification] = React.useState(\"\");\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n\n  const navigate = useNavigate();\n\n  React.useEffect(() => {\n    if (loggedIn(state.credentials!)) {\n      navigate(\"/\");\n    }\n  }, [state.credentials, navigate]);\n\n  const handleErrors = (response: Response) => {\n    if (response.status === 400) {\n      setErrorMessage(\"email address unavailable\");\n    } else {\n      setErrorMessage(`something went wrong: ${response.status}`);\n    }\n  };\n\n  const postRegistration = async (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n    if (passphrase !== verification) {\n      setErrorMessage(\"passphrases must match\");\n    } else if ([email, passphrase, verification].includes(\"\")) {\n      setErrorMessage(\"cannot be blank\");\n    } else {\n      const request: RegisterRequest = { email, passphrase };\n      const response: RegisterResponse | undefined = await Api().post(\n        \"identify/register\",\n        null,\n        request,\n        handleErrors\n      );\n\n      if (response !== undefined) {\n        const newState = stateFromAuthenticationResponseData(response);\n        setState(newState);\n      }\n    }\n  };\n\n  return (\n    <Center h=\"100%\">\n      <Box w=\"container.md\">\n        <form>\n          <FormControl isRequired>\n            email\n            <InputGroup size=\"2xl\">\n              <Input\n                id=\"register-email\"\n                type=\"email\"\n                borderRadius=\"lg\"\n                paddingLeft=\"4px\"\n                paddingRight=\"4px\"\n                focusBorderColor=\"black\"\n                onChange={(event) => {\n                  setEmail(event.target.value);\n                }}\n              />\n            </InputGroup>\n            password\n            <InputGroup size=\"2xl\">\n              <Input\n                id=\"register-passphrase\"\n                type=\"password\"\n                borderRadius=\"lg\"\n                paddingLeft=\"4px\"\n                paddingRight=\"4px\"\n                focusBorderColor=\"black\"\n                onChange={(event) => {\n                  setPassphrase(event.target.value);\n                }}\n              />\n            </InputGroup>\n            verification\n            <InputGroup size=\"2xl\">\n              <Input\n                id=\"register-verification\"\n                type=\"password\"\n                borderRadius=\"lg\"\n                paddingLeft=\"4px\"\n                paddingRight=\"4px\"\n                focusBorderColor=\"black\"\n                onChange={(event) => {\n                  setVerification(event.target.value);\n                }}\n              />\n            </InputGroup>\n          </FormControl>\n          <Button\n            id=\"register-submit\"\n            width=\"full\"\n            type=\"submit\"\n            size=\"2xl\" // should try and override Button to add 2xl, removing padding\n            borderRadius=\"lg\"\n            color=\"white\"\n            backgroundColor=\"black\"\n            fontWeight=\"normal\"\n            paddingBottom=\"9px\"\n            paddingTop=\"3px\"\n            marginTop=\"14px\"\n            loadingText=\"Registering...\"\n            onClick={postRegistration}\n          >\n            Register\n          </Button>\n          <Center id=\"register-errorMessage\">\n            {errorMessage !== \"\" ? errorMessage : null}\n          </Center>\n        </form>\n      </Box>\n    </Center>\n  );\n};\n\nexport default Register;\n"],"names":["useGlobalState","state","setState","React","email","setEmail","passphrase","setPassphrase","verification","setVerification","errorMessage","setErrorMessage","navigate","useNavigate","loggedIn","credentials","handleErrors","response","status","postRegistration","event","preventDefault","includes","request","Api","post","undefined","newState","stateFromAuthenticationResponseData","h","w","isRequired","size","id","type","borderRadius","paddingLeft","paddingRight","focusBorderColor","onChange","target","value","width","color","backgroundColor","fontWeight","paddingBottom","paddingTop","marginTop","loadingText","onClick"],"sourceRoot":""}