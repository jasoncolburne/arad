#!/usr/bin/env bash

set -eo > /dev/null

# use like this:
#   echo "${SOME_SECRET}" | scripts/secrets put some_secret_name
# or
#   cat some_secret_file.txt | scripts/secrets put some_secret_name
put() {
  local SECRET_NAME=$1

  vault kv put -mount=secret "${SECRET_NAME}" value=-
}

get() {
  local SECRET_NAME=$1

  if [[ ! -z "$(vault kv get -mount=secret --field=value "${SECRET_NAME}" 2>&1 | grep "not present")" ]]; then
    vault kv get -mount=secret --field=pem "${SECRET_NAME}"
  else
    vault kv get -mount=secret --field=value "${SECRET_NAME}"
  fi
}

# sudo apt-get install -y argon2
# https://security.stackexchange.com/questions/128883/basic-question-regarding-openssl-and-aes-gcm
dump() {
  if [[ -f secrets.tgz ]]; then
    echo "existing secrets backup at this location. please move this file."
    exit 1
  fi

  echo "dumping secrets"
  mkdir secrets

  LINES=$(vault kv list secret/ | wc -l)
  let LINES--
  let LINES--

  for SECRET_NAME in $(vault kv list secret/ | tail -n${LINES}); do
    ./scripts/secrets get ${SECRET_NAME} > secrets/${SECRET_NAME}
  done

  echo "packaging secrets"
  tar czvf secrets.clear.tgz secrets/
  rm -rf secrets

  echo -n "enter a passphrase: "
  STTY_ORIG=$(stty -g)    # save original terminal setting.
  stty -echo              # turn-off echoing.
  IFS= read -r PASSPHRASE # read the passphrase.
  stty "${STTY_ORIG}"     # restore terminal setting.
  echo

  echo -n "verify: "
  STTY_ORIG=$(stty -g)      # save original terminal setting.
  stty -echo                # turn-off echoing.
  IFS= read -r VERIFICATION # read the passphrase.
  stty "${STTY_ORIG}"       # restore terminal setting.
  echo

  if [[ "${PASSPHRASE}" != "${VERIFICATION}" ]]; then
    echo "passphrases did not match!"
    rm -f secrets.clear.tgz
    exit 1
  fi

  echo "creating encryption key"
  ARGON_DATA=$(echo -n "${PASSPHRASE}" | argon2 $(dd if=/dev/urandom bs=16 count=1 | base64) -id -e -t 10 -m 20 -p 8)
  unset PASSPHRASE

  echo "${ARGON_DATA}" | cut -d'$' -f2,3,4,5 > secrets.salt
  KEY=$(echo "${ARGON_DATA}" | cut -d'$' -f6 | base64 -d -i - 2>/dev/null | od -A n -t x1 | sed 's/ *//g' | tr --delete '\n')
  unset ARGON_DATA

  echo "generating iv"
  dd if=/dev/urandom bs=16 count=1 | od -A n -t x1 | sed 's/ *//g' | tr --delete '\n' > secrets.iv

  echo "encrypting"
  cat secrets.clear.tgz | aes256gcm $KEY $(cat secrets.iv) > secrets.enc
  unset KEY
  rm -f secrets.clear.tgz

  echo "bundling"
  tar czvf secrets.tgz secrets.enc secrets.salt secrets.iv

  echo "cleaning up"
  rm -f secrets.{enc,salt,iv}
}

restore() {
  echo "unbundling"
  tar xzvf secrets.tgz

  echo -n "enter a passphrase: "
  STTY_ORIG=$(stty -g)    # save original terminal setting.
  stty -echo              # turn-off echoing.
  IFS= read -r PASSPHRASE # read the password
  stty "${STTY_ORIG}"     # restore terminal setting.

  echo
  echo "deriving decryption key"
  SALT=$(cat secrets.salt | cut -d'$' -f4 | base64 -d -i 2>/dev/null)
  KEY=$(echo -n "${PASSPHRASE}" | argon2 ${SALT} -id -r -t 10 -m 20 -p 8)
  unset PASSPHRASE

  echo "decrypting"
  cat secrets.enc | aes256gcm-decrypt $KEY $(cat secrets.iv) > secrets.clear.tgz
  unset KEY

  echo "loading secrets into vault"
  tar xzvf secrets.clear.tgz
  rm -f secrets.clear.tgz
  cd secrets
  for SECRET_NAME in *; do
    cat ${SECRET_NAME} | ../scripts/secrets put ${SECRET_NAME}
  done

  echo "cleaning up"
  cd ..
  rm -rf secrets
  rm -f secrets.{enc,salt,iv}
}

execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "put" ]]; then
    put "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "get" ]]; then
    get "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "dump" ]]; then
    dump
  elif [[ "${COMMAND}" == "restore" ]]; then
    restore
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
