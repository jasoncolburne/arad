#!/usr/bin/env bash

set -eo pipefail

BACKENDS=(administrator reviewer reader identity)

set +e
read -r -d '' ACTIVATE_SCRIPT << EOS
BASE_PATH=\$(poetry env info | grep '^Path' | head -n1 | cut -d':' -f2 | sed 's/\s*//')
ACTIVATE="\${BASE_PATH}/bin/activate"
. \${ACTIVATE}
EOS
set -e

simple_command() {
  local SERVICE=$1
  local COMMAND_STRING=$2

  set +e
  read -r -d '' SHELL_SCRIPT << EOS
${ACTIVATE_SCRIPT}
${COMMAND_STRING}
EOS
  set -e

  docker compose run --rm -it "be-${SERVICE}" bash -c "${SHELL_SCRIPT}"
}

pytest() {
  simple_command $1 "pytest ."
}

black() {
  simple_command $1 "black ."
}

all() {
  # sync first so that common changes don't get blown away during this process
  echo "syncing code"
  echo

  ./scripts/sync

  echo
  echo "running black on all services"
  echo

  for BACKEND in "${BACKENDS[@]}"; do
    ./scripts/test black "${BACKEND}"
  done

  echo
  echo "moving black changes back into be-common..."
  echo
  rsync -v -r -d be-identity/database be-common
  rsync -v -r -d be-identity/common be-common
  
  echo
  echo "re-syncing"
  echo
  ./scripts/sync

  echo
  echo "running pytest on all services"
  echo
  for BACKEND in "${BACKENDS[@]}"; do
    ./scripts/test pytest "${BACKEND}"
  done
}

# we can probably do the rest in a single line by eval or something
execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "pytest" ]]; then
    pytest "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "black" ]]; then
    black "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "all" ]]; then
    all
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
