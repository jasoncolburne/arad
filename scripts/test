#!/usr/bin/env bash

set -eo pipefail

BACKENDS=(administrator reviewer reader identity core)
ACTIVATE_SCRIPT=". \$(./activate)"

# core meaning the directory, arad/core. it's harder to test this code as we aren't deploying an image of it
core_command() {
  local COMMAND_STRING=$1

  set +e
  read -r -d '' SHELL_SCRIPT << EOS
${ACTIVATE_SCRIPT}
${COMMAND_STRING}
EOS
  read -r -d '' ACCESS_TOKEN_PUBLIC_KEY_PEM << EOV
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEnoH4lyjW4T0uUFbAYRL1G/3dxF1M
kak4CYTwDU8lSubpkIKXFqo7KtsWIycbTKbfLm2IdwNXDOO346u4OhCaBg==
-----END PUBLIC KEY-----
EOV
  set -e
  export ACCESS_TOKEN_PUBLIC_KEY_PEM

  docker run --rm -v "$(pwd)/core:/app" -e ACCESS_TOKEN_PUBLIC_KEY_PEM arad_core-test bash -c "${SHELL_SCRIPT}"
}

simple_compose_command() {
  local SERVICE=$1
  local COMMAND_STRING=$2

  if [[ "${SERVICE}" == "core" ]]
  then
    core_command "${COMMAND_STRING}"
  else
    set +e
    read -r -d '' SHELL_SCRIPT << EOS
${ACTIVATE_SCRIPT}
${COMMAND_STRING}
EOS
    set -e

    docker compose run --rm "${SERVICE}" bash -c "${SHELL_SCRIPT}"
  fi
}

pytest() {
  simple_compose_command $1 "pytest ."
}

black() {
  simple_compose_command $1 "black ."
}

pylint() {
  simple_compose_command $1 "find . -maxdepth 1 -type d -not -name '.*' | xargs pylint"
}

mypy() {
  simple_compose_command $1 "mypy --install-types --non-interactive ."
}

eslint() {
  unset ACTIVATE_SCRIPT
  simple_compose_command front-end "yarn run eslint --max-warnings=0 ."
}

tsc() {
  unset ACTIVATE_SCRIPT
  simple_compose_command front-end "yarn run tsc --strict"
}

prettier() {
  unset ACTIVATE_SCRIPT
  simple_compose_command front-end "yarn run prettier --write ."
}

e2e() {
  ./scripts/local nuke
  ./scripts/local down
  ./scripts/local daemonize
  echo "pausing for 45 seconds to let front end spin up"
  sleep 45
  ./scripts/test fast-e2e
}

fast_e2e() {
  unset ACTIVATE_SCRIPT
  simple_compose_command front-end "yarn cypress:run"
}

back_end() {
  # sync first so that common changes don't get blown away during this process
  echo "syncing code"
  echo

  ./scripts/sync

  echo
  echo "running black on all services"
  echo

  for BACKEND in "${BACKENDS[@]}"; do
    ./scripts/test black "${BACKEND}"
  done

  echo
  echo "moving black changes back into common..."
  echo
  rsync -v -r -d administrator/database core
  rsync -v -r -d identity/common core
  
  echo
  echo "re-syncing"
  echo
  ./scripts/sync

  echo
  echo "running pylint on all services"
  echo
  for BACKEND in "${BACKENDS[@]}"; do
    ./scripts/test pylint "${BACKEND}"
  done

  echo
  echo "running mypy on all services"
  echo
  for BACKEND in "${BACKENDS[@]}"; do
    ./scripts/test mypy "${BACKEND}"
  done

  echo
  echo "running pytest on all services"
  echo
  for BACKEND in "${BACKENDS[@]}"; do
    ./scripts/test pytest "${BACKEND}"
  done

  echo
  echo "all tests passed!"
}

front_end() {
  ./scripts/test tsc
  ./scripts/test eslint
  ./scripts/test prettier
}

# we can probably do the rest in a single line by eval or something
execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "behave" ]]; then
    behave "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "pytest" ]]; then
    pytest "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "black" ]]; then
    black "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "pylint" ]]; then
    pylint "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "mypy" ]]; then
    mypy "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "eslint" ]]; then
    eslint
  elif [[ "${COMMAND}" == "tsc" ]]; then
    tsc
  elif [[ "${COMMAND}" == "prettier" ]]; then
    prettier
  elif [[ "${COMMAND}" == "e2e" ]]; then
    e2e
  elif [[ "${COMMAND}" == "fast-e2e" ]]; then
    fast_e2e
  elif [[ "${COMMAND}" == "back-end" ]]; then
    back_end
  elif [[ "${COMMAND}" == "front-end" ]]; then
    front_end
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
