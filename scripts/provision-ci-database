#!/usr/bin/env bash

set -exo pipefail

USER_DATABASE_HOST=database
USER_DATABASE_NAME=arad_user
USER_DATABASE_USER=arad_user
USER_DATABASE_PASSPHRASE=arad_user

APPLICATION_DATABASE_HOST=database
APPLICATION_DATABASE_NAME=arad_application
APPLICATION_DATABASE_USER=arad_application
APPLICATION_DATABASE_PASSPHRASE=arad_application

DATABASE_USER=postgres
DATABASE_PASSPHRASE=postgres

ACTIVATE_SCRIPT=". \$(./activate)"

set +e
read -r -d '' CREATE_SCRIPT << EOS
apt-get -y install postgresql-client

(echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}) || true
echo "SELECT 'CREATE DATABASE ${USER_DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${USER_DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} << PLPGSQL
DO
\\\$do\\\$
BEGIN
  IF NOT EXISTS (
    SELECT FROM pg_catalog.pg_roles
    WHERE  rolname = '${USER_DATABASE_USER}') THEN
    CREATE ROLE ${USER_DATABASE_USER} LOGIN PASSWORD '${USER_DATABASE_PASSPHRASE}';
  END IF;
END
\\\$do\\\$;
PLPGSQL
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} -c "GRANT ALL PRIVILEGES ON DATABASE ${USER_DATABASE_NAME} TO ${USER_DATABASE_USER};"

(echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST}) || true
echo "SELECT 'CREATE DATABASE ${APPLICATION_DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${APPLICATON_DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST}
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} << PLPGSQL
DO
\\\$do\\\$
BEGIN
  IF NOT EXISTS (
    SELECT FROM pg_catalog.pg_roles
    WHERE  rolname = '${APPLICATION_DATABASE_USER}') THEN
    CREATE ROLE ${APPLICATION_DATABASE_USER} LOGIN PASSWORD '${APPLICATION_DATABASE_PASSPHRASE}';
  END IF;
END
\\\$do\\\$;
PLPGSQL
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} -c "GRANT ALL PRIVILEGES ON DATABASE ${APPLICATION_DATABASE_NAME} TO ${APPLICATION_DATABASE_USER};"
EOS
set -e

docker compose -f ci-compose.yml run --rm identity bash -c "${CREATE_SCRIPT}"

set +e
read -r -d '' MIGRATE_SCRIPT << EOS
cd /app
ls
${ACTIVATE_SCRIPT}
alembic upgrade head
EOS
set -e

docker compose -f ci-compose.yml run --rm identity bash -c "${MIGRATE_SCRIPT}"
