#!/usr/bin/env bash

set -eo pipefail

DATABASE_SET=$1


if [[ "${DATABASE_SET}" == "ci" ]]
then
  USER_DATABASE_HOST=database
  APPLICATION_DATABASE_HOST=database
else
  USER_DATABASE_HOST=localhost
  APPLICATION_DATABASE_HOST=localhost
fi

USER_DATABASE_NAME=arad_user
USER_DATABASE_USER=arad_user
USER_DATABASE_PASSPHRASE=arad_user

APPLICATION_DATABASE_NAME=arad_application
APPLICATION_DATABASE_USER=arad_application
APPLICATION_DATABASE_PASSPHRASE=arad_application

DATABASE_USER=postgres
DATABASE_PASSPHRASE=passphrase


set +e
read -r -d '' USER_DATABASE_SCRIPT << EOS
apt-get -y install postgresql-client

echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}

echo "SELECT 'CREATE DATABASE ${USER_DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${USER_DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} << PLPGSQL
DO
\\\$do\\\$
BEGIN
  IF NOT EXISTS (
    SELECT FROM pg_catalog.pg_roles
    WHERE  rolname = '${USER_DATABASE_USER}') THEN
    CREATE ROLE ${USER_DATABASE_USER} LOGIN PASSWORD '${USER_DATABASE_PASSPHRASE}';
  END IF;
END
\\\$do\\\$;
PLPGSQL
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} -c "GRANT ALL PRIVILEGES ON DATABASE ${USER_DATABASE_NAME} TO ${USER_DATABASE_USER};"
EOS

read -r -d '' APPLICATION_DATABASE_SCRIPT << EOS
apt-get -y install postgresql-client

echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}

echo "SELECT 'CREATE DATABASE ${APPLICATION_DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${APPLICATON_DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST}
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} << PLPGSQL
DO
\\\$do\\\$
BEGIN
  IF NOT EXISTS (
    SELECT FROM pg_catalog.pg_roles
    WHERE  rolname = '${APPLICATION_DATABASE_USER}') THEN
    CREATE ROLE ${APPLICATION_DATABASE_USER} LOGIN PASSWORD '${APPLICATION_DATABASE_PASSPHRASE}';
  END IF;
END
\\\$do\\\$;
PLPGSQL
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} -c "GRANT ALL PRIVILEGES ON DATABASE ${APPLICATION_DATABASE_NAME} TO ${APPLICATION_DATABASE_USER};"
EOS
set -e




if [[ "${DATABASE_SET}" == "ci" ]]; then
  docker compose -f docker-compose.ci.yml run --rm identity bash -c "${USER_DATABASE_SCRIPT}"
  docker compose -f docker-compose.ci.yml run --rm administrator bash -c "${APPLICATION_DATABASE_SCRIPT}"

  docker compose -f docker-compose.ci.yml run --rm identity ./migrate.sh
  docker compose -f docker-compose.ci.yml run --rm administrator ./migrate.sh
elif [[ "${DATABASE_SET}" == "local" ]]; then
  nomad-pack run nomad/arad

  sleep 30

  IDENTITY_ALLOC=$(nomad status identity_service | rg run | rg identity_service | cut -d' ' -f1)
  ADMINISTRATOR_ALLOC=$(nomad status administrator_service | rg run | rg administrator_service | cut -d' ' -f1)
  nomad alloc exec $IDENTITY_ALLOC bash -c "${USER_DATABASE_SCRIPT}"
  nomad alloc exec $ADMINISTRATOR_ALLOC bash -c "${APPLICATION_DATABASE_SCRIPT}"

  nomad alloc exec $IDENTITY_ALLOC ./migrate.sh
  nomad alloc exec $ADMINISTRATOR_ALLOC ./migrate.sh
else
  echo "unknown database set ${DATABASE_SET}"
  exit 1
fi
