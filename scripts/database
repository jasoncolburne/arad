#!/usr/bin/env bash

set -eo pipefail

USER_DATABASE_HOST=database
USER_DATABASE_NAME=arad_user
USER_DATABASE_USER=arad_user
USER_DATABASE_PASSPHRASE=arad_user

APPLICATION_DATABASE_HOST=database
APPLICATION_DATABASE_NAME=arad_application
APPLICATION_DATABASE_USER=arad_application
APPLICATION_DATABASE_PASSPHRASE=arad_application

DATABASE_USER=postgres
DATABASE_PASSPHRASE=postgres

ACTIVATE_SCRIPT=". \$(./activate)"

create() {
  set +e
  read -r -d '' CREATE_SCRIPT << EOS
apt-get -y install postgresql-client

(echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}) || true
echo "SELECT 'CREATE DATABASE ${USER_DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${USER_DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST}
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} << PLPGSQL
DO
\\\$do\\\$
BEGIN
  IF NOT EXISTS (
    SELECT FROM pg_catalog.pg_roles
    WHERE  rolname = '${USER_DATABASE_USER}') THEN
    CREATE ROLE ${USER_DATABASE_USER} LOGIN PASSWORD '${USER_DATABASE_PASSPHRASE}';
  END IF;
END
\\\$do\\\$;
PLPGSQL
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} -c "GRANT ALL PRIVILEGES ON DATABASE ${USER_DATABASE_NAME} TO ${USER_DATABASE_USER};"

(echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST}) || true
echo "SELECT 'CREATE DATABASE ${APPLICATION_DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${APPLICATON_DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST}
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} << PLPGSQL
DO
\\\$do\\\$
BEGIN
  IF NOT EXISTS (
    SELECT FROM pg_catalog.pg_roles
    WHERE  rolname = '${APPLICATION_DATABASE_USER}') THEN
    CREATE ROLE ${APPLICATION_DATABASE_USER} LOGIN PASSWORD '${APPLICATION_DATABASE_PASSPHRASE}';
  END IF;
END
\\\$do\\\$;
PLPGSQL
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} -c "GRANT ALL PRIVILEGES ON DATABASE ${APPLICATION_DATABASE_NAME} TO ${APPLICATION_DATABASE_USER};"
EOS
  set -e

  docker compose run --rm identity bash -c "${CREATE_SCRIPT}"
}

drop() {
  set +e
  read -r -d '' DROP_SCRIPT << EOS
apt-get -y install postgresql-client
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} -c "DROP DATABASE ${USER_DATABASE_NAME}"
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${USER_DATABASE_HOST} -c "DROP ROLE ${USER_DATABASE_USER}"
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} -c "DROP DATABASE ${APPLICATION_DATABASE_NAME}"
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${APPLICATION_DATABASE_HOST} -c "DROP ROLE ${APPLICATION_DATABASE_USER}"
EOS
  set -e

  docker compose run --rm identity bash -c "${DROP_SCRIPT}"
}

migrate() {
  set +e
  read -r -d '' MIGRATE_SCRIPT << EOS
${ACTIVATE_SCRIPT}
alembic upgrade head
EOS
  set -e

  docker compose run --rm identity bash -c "${MIGRATE_SCRIPT}"
}

generate_migrations() {
  local ARGUMENTS=$1

  if [[ -z "${ARGUMENTS}" ]]
  then
    echo "please supply a name for the migration"
    exit 1
  fi

  set +e
  read -r -d '' GENERATION_SCRIPT << EOS
${ACTIVATE_SCRIPT}
alembic revision --autogenerate -m "${ARGUMENTS}"
chown $(id -u):$(id -g) database/migrations/versions/*
EOS
  set -e

  docker compose run --rm identity bash -c "${GENERATION_SCRIPT}"
}

empty_migration() {
  local ARGUMENTS=$1

  if [[ -z "${ARGUMENTS}" ]]
  then
    echo "please supply a name for the migration"
    exit 1
  fi

  set +e
  read -r -d '' GENERATION_SCRIPT << EOS
${ACTIVATE_SCRIPT}
alembic revision -m "${ARGUMENTS}"
chown $(id -u):$(id -g) database/migrations/versions/*
EOS
  set -e

  docker compose run --rm identity bash -c "${GENERATION_SCRIPT}"
}

# we can probably do the rest in a single line by eval or something
execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "create" ]]; then
    create
  elif [[ "${COMMAND}" == "drop" ]]; then
    drop
  elif [[ "${COMMAND}" == "migrate" ]]; then
    migrate
  elif [[ "${COMMAND}" == "generate-migrations" ]]; then
    generate_migrations "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "empty-migration" ]]; then
    empty_migration "${ARGUMENTS}"
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
