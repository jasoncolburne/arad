#!/usr/bin/env bash

# TODO see if we can turn -e back on and make read work
set -eo pipefail

DATABASE_HOST=database
DATABASE_NAME=arad
DATABASE_USER=postgres
DATABASE_PASSPHRASE=postgres
set +e
read -r -d '' ACTIVATE_SCRIPT << EOS
BASE_PATH=\$(poetry env info | grep '^Path' | head -n1 | cut -d':' -f2 | sed 's/\s*//')
ACTIVATE="\${BASE_PATH}/bin/activate"
. \${ACTIVATE}
EOS
set -e

create() {
  set +e
  read -r -d '' CREATE_SCRIPT << EOS
apt-get -y install postgresql-client
echo "SELECT 'CREATE DATABASE ${DATABASE_NAME}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${DATABASE_NAME}')\gexec" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${DATABASE_HOST}
(echo "create EXTENSION if not EXISTS pgcrypto;" | PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${DATABASE_HOST}) || true
EOS
  set -e

  docker compose run --rm be-identity bash -c "${CREATE_SCRIPT}"
}

drop() {
  set +e
  read -r -d '' DROP_SCRIPT << EOS
apt-get -y install postgresql-client
PGPASSWORD=${DATABASE_PASSPHRASE} psql -U${DATABASE_USER} -h${DATABASE_HOST} -c "DROP DATABASE ${DATABASE_NAME}"
EOS
  set -e

  docker compose run --rm be-identity bash -c "${DROP_SCRIPT}"
}

migrate() {
  set +e
  read -r -d '' MIGRATE_SCRIPT << EOS
${ACTIVATE_SCRIPT}
alembic upgrade head
EOS
  set -e

  docker compose run --rm be-identity bash -c "${MIGRATE_SCRIPT}"
}

generate_migrations() {
  local ARGUMENTS=$1

  if [[ -z "${ARGUMENTS}" ]]
  then
    echo "please supply a name for the migration"
    exit 1
  fi

  set +e
  read -r -d '' GENERATION_SCRIPT << EOS
${ACTIVATE_SCRIPT}
alembic revision --autogenerate -m "${ARGUMENTS}"
chown $(id -u):$(id -g) database/migrations/versions/*
EOS
  set -e

  docker compose run --rm be-identity bash -c "${GENERATION_SCRIPT}"

  rsync -v -r -d be-identity/database/migrations/versions be-common/database/migrations
  ./sync
}

empty_migration() {
  local ARGUMENTS=$1

  if [[ -z "${ARGUMENTS}" ]]
  then
    echo "please supply a name for the migration"
    exit 1
  fi

  set +e
  read -r -d '' GENERATION_SCRIPT << EOS
${ACTIVATE_SCRIPT}
alembic revision -m "${ARGUMENTS}"
chown $(id -u):$(id -g) database/migrations/versions/*
EOS
  set -e

  docker compose run --rm be-identity bash -c "${GENERATION_SCRIPT}"

  rsync -v -r -d be-identity/database/migrations/versions be-common/database/migrations
  ./sync
}

# we can probably do the rest in a single line by eval or something
execute() {
  local COMMAND=$1
  local ARGUMENTS=$(echo $2 | sed "s/^ *//" | sed "s/ *\$//")

  if [[ "${COMMAND}" == "create" ]]; then
    create
  elif [[ "${COMMAND}" == "drop" ]]; then
    drop
  elif [[ "${COMMAND}" == "migrate" ]]; then
    migrate
  elif [[ "${COMMAND}" == "generate-migrations" ]]; then
    generate_migrations "${ARGUMENTS}"
  elif [[ "${COMMAND}" == "empty-migration" ]]; then
    empty_migration "${ARGUMENTS}"
  else
    echo "unknown command ${COMMAND}"
    exit 1
  fi
}

execute "$1" "$2 $3 $4 $5 $6 $7 $8 $9"
